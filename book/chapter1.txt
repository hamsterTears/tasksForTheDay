Область видимости.

   Это набор правил для хранения переменных в некотором месте и для обнаружения этих переменных позднее.

Теория компиляторов.
   В традиционном процессе языковой компиляции:
   1.Разбиение на лексемы (Tokenizing/Lexing): разбиение строки символов на имеющие смысл (для языка) части, называемые лексемами. 
   2.Парсинг: берет поток (массив) лексем и превращает его в дерево вложенных элементов, которые сообща представляют грамматическую структуру программы. Это дерево называется "AST" (Abstract Syntax Tree, дерево абстрактного синтаксиса).
   3.Генерация кода: процесс взятия AST и превращения его в исполняемый код.

   Таким образом, компилятор JS сперва возьмет программу var a = 2; и скомпилирует ее, а затем будет готов выполнить ее. Обычно сразу же.

Понимание области видимости.
  1 Движок отвечает за компиляцию от начала и до конца, а также за выполнение нашей JavaScript программы;
  2 Компилятор —  выполняет всю работу по синтаксическому анализу и генерации кода;
  3 Область видимости —  собирает и обслуживает список поиска всех объявленных переменных и следит за исполнением строгого набора правил относительно того, каким образом эти переменные доступны для текущего выполняемого кода.

var a = 2;
Компилятор разобъет ее на лексемы, которые затем распарсит в дерево. Но когда Компилятор доберется до генерации кода, он будет интерпретировать программу несколько по-иному:
1.Встретив var a, Компилятор попросит Область видимости проверить, существует ли уже переменная a в коллекции указанной области видимости. Если да, то Компилятор проигнорирует это объявление переменной и двинется дальше. В противном случае, Компилятор попросит Область видимости объявить новую переменную a в коллекции указанной области видимости.

2.Затем Компилятор сгенерирует код для Движка для последующего выполнения, чтобы обработать присваивание a = 2. Код, который Движок запускает, сначала спросит Область видимости есть ли переменная с именем a, доступная в коллекции текущей области видимости. Если есть, то Движок будет использовать эту переменную. Если нет, то Движок будет искать в другом месте (Вложенная область видимости).

Вложенная область видимости
  Области видимости вкладываются внутрь других областей. Поэтому, если переменную не найти в ближайшей области видимости, Движок заглядывает в следующую внешнюю по отношению к этой область видимости, продолжая так до тех пор, пока не найдет или пока не достигнет самой внешней (т.е. глобальной) области.

Ошибки.
  поиски LHS или RHS ведут себя по-разному в обстановке, когда переменная еще не была объявлена (не была найдена ни в одной просмотренной Области видимости).
  Если RHS-поиск не сможет когда-либо найти переменную, в любой из вложенных Областей видимости, это приведет к возврату Движком ошибки ReferenceError
  
Напротив, если Движок выполняет LHS-поиск и достигает верхнего этажа (глобальной Области видимости) и не находит ничего, и если программа не запущена в "строгом режиме", то затем глобальная Область видимости создаст новую переменную с таким именем в глобальной области видимости и передаст ее обратно Движку.
Теперь, если переменная найдена в ходе RHS-поиска, но вы пытаетесь сделать что-то с ее значением, что невозможно, например, пытаетесь выполнить как функцию не-функциональное значение или ссылаетесь на свойство значения null или undefined, то Движок выдаст другой вид ошибки, называемый TypeError.

ReferenceError — это сбой разрешения имени, связанный с Областью видимости;
TypeError подразумевает, что разрешение имени в Области видимости было успешным, но была попытка выполнения нелегального/невозможного действия с результатом.

Резюме:
  Область видимости — это набор правил, которые определяют где и как переменные могут быть найдены. Этот поиск может осуществляться для целей присваивания значения переменной, которая является LHS (left-hand-side) ссылкой, или может осуществляться для целей извлечения ее значения, которое является RHS (right-hand-side) ссылкой.

LHS-ссылки являются результатом операции присваивания. Присваивания, связанные с Областью видимости, могут происходить либо с помощью операции =, либо передачей аргументов (присваиванием) параметрам функции.

JavaScript Движок перед выполнением сначала компилирует код, и пока он это делает, он разбивает операторы, подобные var a = 2; на два отдельных шага:

Первый, var a, чтобы объявить ее в Область видимости. Это выполняется в самом начале, до исполнения кода.

Позже, a = 2 ищет переменную (LHS-ссылку) и присваивает ей значение, если находит.

Оба поиска ссылок LHS и RHS начинаются в текущей выполняющейся Области видимости и если нужно (т.е. они не нашли что искали в ней), они работают с их более высокими вложенными Областями видимости, с одной областью (этажом) за раз, ища идентификатор, пока не доберутся до глобальной (верхний этаж) и не остановятся, вне зависимости от результата поиска.

Невыполненные RHS-ссылки приводят к выбросу ReferenceError. Невыполненные LHS-ссылки приводят к автоматической, неявно созданной переменной с таким именем (если не включен "Строгий режим"), либо к ReferenceError (если включен "Строгий режим").

