1. Что такое CSS? И для чего он используется?
   CSS (Cascading Style Sheets) - это язык стилей, который используется для описания внешнего вида и форматирования содержимого HTML и XML документов. Он предоставляет возможность определить различные аспекты внешнего вида веб-страницы, такие как цвета, шрифты, расположение элементов, размеры и многое другое.
Основная цель CSS состоит в том, чтобы отделить содержимое (структуру) документа от его представления (стиля). Это позволяет разработчикам легко изменять внешний вид веб-страницы, применяя стили к нескольким элементам сразу или создавая повторно используемые стилевые правила.

2.Что такое CSS-правило?
  CSS-правило представляет собой комбинацию селектора и объявлений стилей, которые применяются к элементам веб-страницы. Каждое правило состоит из двух основных частей: селектора и блока объявлений.
Селектор: Селектор определяет, к каким элементам HTML документа должны быть применены определенные стили. Элементы могут быть выбраны по их типу (такие как <p>, <h1>, <div> и т. д.), по их классам (class), идентификаторам (id), атрибутам и другим характеристикам.
Блок объявлений: Блок объявлений содержит список стилей, которые будут применены к элементам, соответствующим селектору. Каждое объявление стиля состоит из названия CSS свойства и его значения
Таким образом, CSS-правило определяет, какие стили будут применены к каким элементам веб-страницы. Множество CSS-правил собираются в файл стилей (обычно с расширением .css), который затем подключается к HTML документу с помощью тега <link> или встроенного стиля в теге <style>.

3. Варианты добавление CSS стилей на страницу?

Есть несколько способов добавления CSS стилей на веб-страницу:

Внешний файл CSS:
В этом случае CSS стили хранятся в отдельном файле с расширением .css, а затем этот файл подключается к HTML документу с помощью тега <link> в секции <head>:
  <head>
    <link rel="stylesheet" type="text/css" href="styles.css">
</head>

Встроенные стили:
CSS стили могут быть встроены непосредственно в HTML документ с использованием тега <style> внутри секции <head>:
<head>
    <style>
        /* CSS стили */
        p {
            color: blue;
        }
    </style>
</head>
Этот метод полезен, когда нужно применить стили к конкретному документу.

Inline-стили:
CSS стили могут быть заданы непосредственно в HTML элементах с помощью атрибута style. Этот способ применяет стили только к одному конкретному элементу:
<p style="color: blue;">Этот текст будет синим цветом.</p>
Однако этот способ лучше использовать в крайних случаях, так как инлайн-стили могут усложнить поддержку и модификацию кода.

4. Типы позиционирования в CSS?
 - Статическое позиционирование (static):
Это тип позиционирования по умолчанию для всех элементов. Элементы с статическим позиционированием размещаются в порядке следования в HTML документе. Их положение на странице 
определяется нормальным потоком содержимого, и не подвержено влиянию свойств top, right, bottom, left.
- Относительное позиционирование (relative):
Элементы с относительным позиционированием остаются в нормальном потоке содержимого, но их позиция может быть смещена относительно их исходного местоположения 
с помощью свойств top, right, bottom, left. При этом они остаются занимать свое место в документе, и другие элементы не перемещаются в соответствии с ними.
- Абсолютное позиционирование (absolute):
Элементы с абсолютным позиционированием удаляются из нормального потока содержимого и размещаются в соответствии с их ближайшим позиционированным (не статическим) родительским элементом. Если такого элемента нет, они размещаются относительно
 корневого контейнера (обычно <body>). При этом свойства top, right, bottom, left определяют их местоположение.
- Фиксированное позиционирование (fixed):
Элементы с фиксированным позиционированием также удаляются из нормального потока содержимого и размещаются относительно
 вьюпорта браузера. Они остаются на месте даже при прокрутке страницы. Свойства top, right, bottom, left определяют их местоположение.
- Относительное позиционирование по значению (sticky):
Этот тип позиционирования сочетает в себе особенности относительного и фиксированного позиционирования. Элемент сначала позиционируется как обычно в потоке документа, а затем может быть "прикреплен" к определенной позиции во время прокрутки
 страницы, определенной с помощью свойств top, right, bottom, left.


5. Блочная модель CSS?

Блочная модель CSS - это основа для размещения элементов на веб-странице с использованием CSS. Она определяет, как элементы располагаются и какое пространство они занимают. В целом, блочная модель включает в себя четыре основных компонента:

Контент (Content): Это фактическое содержимое элемента, такое как текст, изображения, видео и т. д.
Внутренние отступы (Padding): Это пространство между контентом элемента и его границей. Внутренние отступы задаются с помощью свойства CSS padding и могут быть одинаковыми по всем сторонам элемента или отдельно задаваться для каждой стороны.
Граница (Border): Граница представляет собой линию, определяющую контур элемента. Она располагается вокруг внутренних отступов и может иметь различные стили, ширину и цвет. Граница определяется с помощью свойства CSS border.
Внешние отступы (Margin): Внешние отступы представляют собой пространство между границей элемента и окружающими элементами. Они задаются с помощью свойства CSS margin и могут также быть одинаковыми по всем сторонам или отдельно задаваться для каждой стороны.

Когда браузер отображает элементы на веб-странице, он учитывает все эти компоненты блочной модели CSS. Каждый элемент может иметь свой уникальный размер и расположение, определяемое значениями отступов, границ и контента.


6. Что такое селектор? И какие селекторы существуют?
В CSS селекторы используются для указания на элементы HTML, к которым применяются определенные стили. Селекторы позволяют выбирать элементы по различным критериям, таким как их тип, класс, идентификатор и другие атрибуты. Вот некоторые из наиболее распространенных типов селекторов:

Селектор по типу элемента: Выбирает все элементы определенного типа. Например:
p {
    /* стили для всех элементов <p> */
}

Селектор по классу: Выбирает все элементы с указанным значением класса. Класс указывается с помощью точки (.) перед названием класса. Например:
.my-class {
    /* стили для всех элементов с классом "my-class" */
}

Селектор по идентификатору: Выбирает элемент с указанным идентификатором. Идентификатор указывается с помощью решетки (#) перед названием идентификатора. Например:
#my-id {
    /* стили для элемента с идентификатором "my-id" */
}

Селектор по атрибуту: Выбирает элементы с указанным атрибутом и его значением. Например:
input[type="text"] {
    /* стили для всех элементов input с атрибутом type="text" */
}

Комбинированные селекторы: Позволяют объединять несколько селекторов в одно правило CSS. Например, можно комбинировать селекторы по типу элемента, классу и идентификатору:
div.container p.my-class#my-id {
    /* стили для всех элементов <p> с классом "my-class" и идентификатором "my-id", которые находятся внутри элемента <div> с классом "container" */
}


7. Что такое специфичность селектора? Как считать вес селектора?

Специфичность селектора - это понятие в CSS, которое определяет, какой стиль будет применен к элементу, если он подпадает под несколько правил стилей. Каждый селектор имеет свою специфичность, и чем более специфичен селектор, тем выше его приоритет при применении стилей.

Специфичность селектора измеряется с помощью четырех чисел (a, b, c, d), где:

a - количество идентификаторов (ID selectors) в селекторе.
b - количество классов (class selectors), псевдо-классов (pseudo-classes) и атрибутных селекторов (attribute selectors) в селекторе.
c - количество типовых селекторов (type selectors) и псевдо-элементов (pseudo-elements) в селекторе.
d - количество универсальных селекторов (*) и комбинаторов (combinators) в селекторе.
Чем больше значение каждого из этих чисел, тем более специфичен селектор. Например, селектор #header .menu li a имеет специфичность (0, 1, 3, 0), а селектор body .menu a имеет специфичность (0, 1, 2, 0).

Если два правила имеют одинаковую специфичность, то приоритет имеет последнее из них (то есть то, которое определено позже в CSS).

При подсчете веса селектора просто суммируются значения каждого из чисел (a, b, c, d). Например, если у вас есть селектор div#header .menu a:hover, то его вес будет равен 1 (значение a) + 1 (значение b) + 1 (значение c) + 1 (значение d), что дает общий вес 4.

8. Разница между Reset.css и Normalize.css?
 Reset.css и Normalize.css - это два популярных подхода к обнулению стилей (resetting) в CSS, которые используются для обеспечения более однородного и предсказуемого начального вида элементов веб-страницы на различных браузерах. Однако они имеют некоторые отличия в своем подходе:

Reset.css:

Полное обнуление: Reset.css применяет абсолютное обнуление (reset) ко всем стилям HTML элементов. Это означает, что все стили, заданные по умолчанию браузером для элементов, полностью сбрасываются до нулевого состояния. После этого разработчик может определять все стили заново с учетом своих потребностей.
Простота: Reset.css обычно более простой и легкий в использовании, поскольку он просто сбрасывает все стили, не предоставляя дополнительных стилей по умолчанию.
Потенциальные проблемы с доступностью: Использование Reset.css может привести к потенциальным проблемам с доступностью, поскольку он полностью сбрасывает стили, включая стандартные стили, которые могут быть важными для пользователей с ограниченными возможностями.
Normalize.css:

Нормализация стилей: В отличие от Reset.css, Normalize.css предназначен для нормализации стилей между различными браузерами, делая их более консистентными. Он сохраняет полезные стандартные стили браузера, но устанавливает единый набор базовых стилей для различных элементов.
Учет кросс-браузерности: Normalize.css учитывает кросс-браузерные различия и пытается сделать стили более согласованными между различными браузерами и операционными системами.
Более гибкий подход: Поскольку Normalize.css не полностью сбрасывает стили, он может быть более предсказуемым и гибким в использовании, особенно для проектов, где необходимо сохранить некоторые стандартные стили браузера.
В целом, выбор между Reset.css и Normalize.css зависит от потребностей вашего проекта. Если вам нужно полное контроль над стилями и вы предпочитаете начинать с чистого листа, может быть лучше использовать Reset.css. Если вы хотите более консистентный и предсказуемый вид на различных браузерах, то Normalize.css может быть более подходящим выбором.

9. Разница между margin и padding?
Оба свойства margin и padding в CSS используются для управления пространством вокруг элемента, но имеют разные назначения и влияют на разные аспекты расположения элемента:
Margin (внешние отступы):
margin устанавливает внешние отступы элемента от его соседних элементов. Отступы могут быть заданы как для отдельных сторон элемента, так и для всех сторон сразу.
Отрицательные значения маргина могут использоваться для смещения элемента относительно его обычного положения или для создания перекрытий между элементами.
Padding (внутренние отступы):

padding устанавливает внутренние отступы элемента, то есть пространство между границей элемента и его контентом.
Отступы могут быть заданы для каждой стороны элемента отдельно или для всех сторон сразу.
Используется для создания внутреннего пространства внутри элемента и контроля расстояния между содержимым элемента и его границей.

margin управляет внешним пространством вокруг элемента, в то время как padding управляет внутренним пространством внутри элемента.

10. Разница между display: none и visibility: hidden?
Оба CSS свойства display и visibility используются для скрытия элементов, но есть существенная разница между ними:

display: none:

Это CSS свойство полностью удаляет элемент из потока документа. Другими словами, элемент не будет занимать место на странице, как если бы его вообще не было.
Когда установлено значение display: none, элемент становится невидимым для пользователей и не участвует в расчетах макета страницы. Он также не доступен для событий мыши и клавиатуры.
При использовании display: none элемент полностью скрыт и его размеры не учитываются при разметке страницы.
visibility: hidden:

Это CSS свойство делает элемент невидимым, но оставляет его место на странице. То есть, элемент скрыт, но он занимает тот же объем места, который он занимал бы, если бы был видимым.
Когда установлено значение visibility: hidden, элемент остается в потоке документа, и место, которое он занимает, резервируется. Это может привести к изменению макета страницы, так как остальные элементы будут рассчитывать свои позиции с учетом невидимого элемента.
Хотя элемент невидим, он все еще доступен для событий мыши и клавиатуры.
Таким образом, основное различие между display: none и visibility: hidden заключается в том, что первый полностью удаляет элемент из потока документа, а второй делает элемент невидимым, но оставляет его место на странице.







